# Copyright IPQualityScore LLC 2023
# ver. 0.0.2

- $ref: "../../common.yaml#/components/parameters/formatParam"
# API key

#keyHeaderParam:
- description: API key
  name: IPQS-KEY
  in: header
  required: false
  schema:
    type: string
# #keyParam:
# - description: API key
#   name: key
#   in: query
#   required: false
#   schema:
#     type: string
# #ipParam:
# - description: IPv4 or IPv6 address (used in GET query)
#   name: ip
#   in: query
#   required: false
#   schema:
#     type: string
# Additional request parameters
#strictnessParam:
- description: |
    How in depth (strict) do you want this query to be? Higher values take longer to process
    and may provide a higher false-positive rate. We recommend starting at "0", the lowest 
    strictness setting, and increasing to "1" depending on your levels of fraud. Levels 2+ are
    VERY strict and will produce false-positives.
  name: strictness
  in: query
  schema:
    $ref: "../schemas/_index.yaml#/Strictness"
#userAgentParam:
- description: |
    You can optionally provide us with the user agent string (browser). This allows us to run
    additional checks to see if the user is a bot or running an invalid browser. This allows
    us to evaluate the risk of the user as judged in the "fraud_score".
  name: user_agent
  in: query
  schema:
    type: string
#userLanguageParam:
- description: >
    You can optionally provide us with the user's language header. This allows us to evaluate
    the risk of the user as judged in the "fraud_score".
  name: user_language
  in: query
  schema:
    type: string
#fastParam:
- description: |
    When this parameter is enabled our API will not perform certain forensic checks that take
    longer to process. Enabling this feature greatly increases the API speed without much
    impact on accuracy. This option is intended for services that require decision making in
    a time sensitive manner and can be used for any strictness level.
  name: fast
  in: query
  schema:
    type: boolean
#mobileParam:
- description: |
    You can optionally specify that this lookup should be treated as a mobile device. Recommended
    for mobile lookups that do not have a user agent attached to the request. NOTE: This can
    cause unexpected and abnormal results if the device is not a mobile device.
  name: mobile
  in: query
  schema:
    type: boolean
#papParam:
- description: |
    Bypasses certain checks for IP addresses from education and research institutions, schools,
    and some corporate connections to better accommodate audiences that frequently use public
    connections.
  name: allow_public_access_points
  in: query
  schema:
    type: boolean
#penaltiesParam:
- description: |
    Is your scoring too strict? Enable this setting to lower detection rates and Fraud Scores for
    mixed quality IP addresses. If you experience any false-positives with your traffic then
    enabling this feature will provide better results.
  name: lighter_penalties
  in: query
  schema:
    type: boolean
#transactionStrictnessParam:
- description: >
    Adjusts the weights for penalties applied due to irregularities and fraudulent patterns
    detected on order and transaction details that can be optionally provided on each API
    request. This feature is only beneficial if you are passing order and transaction details.
    A table is available further down the page with supported transaction variables.
  name: transaction_strictness
  in: query
  schema:
    $ref: "../schemas/_index.yaml#/TransactionStrictness"
# billing
- name: billing_first_name
  description: The customer's billing first name.
  in: query
  schema:
    type: string
- name: billing_last_name
  description: The customer's billing last name.
  in: query
  schema:
    type: string
- name: billing_company
  description: The customer's billing company.
  in: query
  schema:
    type: string
- name: billing_country
  description: >
    The customer's billing country name or billing country ISO-Alpha2. (EG: United States or US)
  in: query
  schema:
    type: string
  examples:
    countryWords:
      value: "United States"
    countryCode:
      value: "US"
- name: billing_address_1
  description: The customer's billing street address part 1.
  in: query
  schema:
    type: string
- name: billing_address_2
  description: The customer's billing street address part 2.
  in: query
  schema:
    type: string
- name: billing_city
  description: The customer's billing city.
  in: query
  schema:
    type: string
- name: billing_region
  description: The customer's billing region or state.
  in: query
  schema:
    type: string
- name: billing_postcode
  description: The customer's billing postcode or zipcode.
  in: query
  schema:
    oneOf:
      - type: string
      - type: integer
- name: billing_email
  description: The customer's billing email address.
  in: query
  schema:
    type: string
- name: billing_phone
  description: >
    The customer's billing 11 to 14 digit phone number. (If less than 10 digits provided, the
    country code will be guessed by our AI.)
  in: query
  schema:
    type: integer
    format: 11- to 14-digit phone number

# shipping
- name: shipping_first_name
  description: The customer's shipping first name.
  in: query
  schema:
    type: string
- name: shipping_last_name
  description: The customer's shipping last name.
  in: query
  schema:
    type: string
- name: shipping_company
  description: The customer's shipping company.
  in: query
  schema:
    type: string
- name: shipping_country
  description: >
    The customer's shipping country name or shipping country ISO-Alpha2. (EG: United States or US)
  in: query
  schema:
    type: string
  examples:
    countryWords:
      value: "United States"
    countryCode:
      value: "US"
- name: shipping_address_1
  description: The customer's shipping street address part 1.
  in: query
  schema:
    type: string
- name: shipping_address_2
  description: The customer's shipping street address part 2.
  in: query
  schema:
    type: string
- name: shipping_city
  description: The customer's shipping city.
  in: query
  schema:
    type: string
- name: shipping_region
  description: The customer's shipping region or state.
  in: query
  schema:
    type: string
- name: shipping_postcode
  description: The customer's shipping postcode or zipcode.
  in: query
  schema:
    oneOf:
      - type: string
      - type: integer
- name: shipping_email
  description: The customer's shipping email address.
  in: query
  schema:
    type: string
- name: shipping_phone
  description: >
    The customer's shipping 11 to 14 digit phone number. (If less than 10 digits provided, the
    country code will be guessed by our AI.)
  in: query
  schema:
    type: integer
    # non-standard format string is permitted for documentation purposes
    # https://spec.openapis.org/oas/v3.0.3#data-types
    format: 11- to 14-digit phone number

- name: username
  description: The customer's username.
  in: query
  schema:
    type: string
- name: password_hash
  description: >
    For security reasons and following industry best practices, a SHA256 hash of the user's password
    for better user analysis.
  in: query
  schema:
    type: string
    format: SHA256
- name: credit_card_bin
  description: >
    First six digits of the credit or debit card, referred to as the Bank Identification Number.
  in: query
  schema:
    type: integer
    minimum: 100000
    maximum: 999999
- name: credit_card_hash
  description: >
    For security reasons and following industry best practices, a SHA256 hash of the
    credit card number is accepted to check against blacklisted cards.
  in: query
  schema:
    type: string
    format: SHA256
- name: credit_card_expiration_month
  description: >
    Two letter format of the credit card's expiration month. For example, May would be "05".
  in: query
  schema:
    type: integer # <-- double check this
    format: 2-digit
    minimum: 01
    maximum: 12
    example: 05
- name: credit_card_expiration_year
  description: >
    Two letter format of the credit card's expiration year. For example, 2022 would be "22".
  in: query
  schema:
    type: integer
    format: 2-digit
    minimum: 00
    maximum: 99
    example: 22
- name: avs_code
  description: >
    One letter Address Verification Service (AVS) response code provided by the credit card
    processor or bank. A full list of acceptable response codes can be viewed [here](https://en.wikipedia.org/wiki/Address_verification_service).
    If your system cannot retrieve the exact response code, values of "pass" or "fail" can be used.
  in: query
  schema:
    type: string
  examples:
    NoMatch:
      value: "N"
    PartialMatch:
      value: "A"
    Pass:
      value: "pass"
    Fail:
      value: "fail"
- name: cvv_code
  description: >
    One letter Card Verification Value (CVV2) response code provided by the credit card processor or
    bank. A full list of acceptable response codes can be viewed here. If your system cannot retrieve
    the exact response code, values of "pass" or "fail" can be used.
  in: query
  schema:
    type: string
  examples:
    Match:
      value: "M"
    NoMatch:
      value: "N"
    Pass:
      value: "pass"
    Fail:
      value: "fail"
- name: order_amount
  description: Total balance of the entire order without currency symbols.
  in: query
  schema:
    type: number
- name: order_quantity
  description: Quantity of items for this order.
  in: query
  schema:
    type: integer # <-- double check
- name: recurring
  description: Is this a recurring order that automatically rebills?
  in: query
  schema:
    type: boolean
- name: recurring_times
  description: >
    If this is a recurring order, how many times has this recurring order rebilled? For
    example, if this is the third time the user is being billed, please enter this value as "3".
    If this is the initial recurring order, please leave the value blank or enter "1".
  in: query
  schema:
    type: integer
